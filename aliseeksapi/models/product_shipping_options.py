# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductShippingOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company': 'str',
        'service_name': 'str',
        'tracking': 'bool',
        'amount': 'Amount',
        'discount': 'float',
        'commit_days': 'int',
        'ship_from': 'str',
        'delivery_time': 'IntegerRange'
    }

    attribute_map = {
        'company': 'company',
        'service_name': 'serviceName',
        'tracking': 'tracking',
        'amount': 'amount',
        'discount': 'discount',
        'commit_days': 'commitDays',
        'ship_from': 'shipFrom',
        'delivery_time': 'deliveryTime'
    }

    def __init__(self, company=None, service_name=None, tracking=None, amount=None, discount=None, commit_days=None, ship_from=None, delivery_time=None):  # noqa: E501
        """ProductShippingOptions - a model defined in OpenAPI"""  # noqa: E501

        self._company = None
        self._service_name = None
        self._tracking = None
        self._amount = None
        self._discount = None
        self._commit_days = None
        self._ship_from = None
        self._delivery_time = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if service_name is not None:
            self.service_name = service_name
        if tracking is not None:
            self.tracking = tracking
        if amount is not None:
            self.amount = amount
        if discount is not None:
            self.discount = discount
        if commit_days is not None:
            self.commit_days = commit_days
        if ship_from is not None:
            self.ship_from = ship_from
        if delivery_time is not None:
            self.delivery_time = delivery_time

    @property
    def company(self):
        """Gets the company of this ProductShippingOptions.  # noqa: E501

        The shipping company   # noqa: E501

        :return: The company of this ProductShippingOptions.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ProductShippingOptions.

        The shipping company   # noqa: E501

        :param company: The company of this ProductShippingOptions.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def service_name(self):
        """Gets the service_name of this ProductShippingOptions.  # noqa: E501

        The name of the shipping service   # noqa: E501

        :return: The service_name of this ProductShippingOptions.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ProductShippingOptions.

        The name of the shipping service   # noqa: E501

        :param service_name: The service_name of this ProductShippingOptions.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def tracking(self):
        """Gets the tracking of this ProductShippingOptions.  # noqa: E501

        Whether or no the shipping option has tracking   # noqa: E501

        :return: The tracking of this ProductShippingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this ProductShippingOptions.

        Whether or no the shipping option has tracking   # noqa: E501

        :param tracking: The tracking of this ProductShippingOptions.  # noqa: E501
        :type: bool
        """

        self._tracking = tracking

    @property
    def amount(self):
        """Gets the amount of this ProductShippingOptions.  # noqa: E501


        :return: The amount of this ProductShippingOptions.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProductShippingOptions.


        :param amount: The amount of this ProductShippingOptions.  # noqa: E501
        :type: Amount
        """

        self._amount = amount

    @property
    def discount(self):
        """Gets the discount of this ProductShippingOptions.  # noqa: E501

        The discount currently on this shipping option   # noqa: E501

        :return: The discount of this ProductShippingOptions.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ProductShippingOptions.

        The discount currently on this shipping option   # noqa: E501

        :param discount: The discount of this ProductShippingOptions.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def commit_days(self):
        """Gets the commit_days of this ProductShippingOptions.  # noqa: E501

        The number of days that are commited for this shipping option   # noqa: E501

        :return: The commit_days of this ProductShippingOptions.  # noqa: E501
        :rtype: int
        """
        return self._commit_days

    @commit_days.setter
    def commit_days(self, commit_days):
        """Sets the commit_days of this ProductShippingOptions.

        The number of days that are commited for this shipping option   # noqa: E501

        :param commit_days: The commit_days of this ProductShippingOptions.  # noqa: E501
        :type: int
        """

        self._commit_days = commit_days

    @property
    def ship_from(self):
        """Gets the ship_from of this ProductShippingOptions.  # noqa: E501

        The place where the shipping comes from   # noqa: E501

        :return: The ship_from of this ProductShippingOptions.  # noqa: E501
        :rtype: str
        """
        return self._ship_from

    @ship_from.setter
    def ship_from(self, ship_from):
        """Sets the ship_from of this ProductShippingOptions.

        The place where the shipping comes from   # noqa: E501

        :param ship_from: The ship_from of this ProductShippingOptions.  # noqa: E501
        :type: str
        """

        self._ship_from = ship_from

    @property
    def delivery_time(self):
        """Gets the delivery_time of this ProductShippingOptions.  # noqa: E501


        :return: The delivery_time of this ProductShippingOptions.  # noqa: E501
        :rtype: IntegerRange
        """
        return self._delivery_time

    @delivery_time.setter
    def delivery_time(self, delivery_time):
        """Sets the delivery_time of this ProductShippingOptions.


        :param delivery_time: The delivery_time of this ProductShippingOptions.  # noqa: E501
        :type: IntegerRange
        """

        self._delivery_time = delivery_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductShippingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
