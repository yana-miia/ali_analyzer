# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ImageSearchResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categories': 'list[ImageSearchCategory]',
        'items': 'list[ImageSearchItem]',
        'selected_category_id': 'int'
    }

    attribute_map = {
        'categories': 'categories',
        'items': 'items',
        'selected_category_id': 'selectedCategoryId'
    }

    def __init__(self, categories=None, items=None, selected_category_id=None):  # noqa: E501
        """ImageSearchResponse - a model defined in OpenAPI"""  # noqa: E501

        self._categories = None
        self._items = None
        self._selected_category_id = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if items is not None:
            self.items = items
        if selected_category_id is not None:
            self.selected_category_id = selected_category_id

    @property
    def categories(self):
        """Gets the categories of this ImageSearchResponse.  # noqa: E501

        The eligible categories that apply to this image search response   # noqa: E501

        :return: The categories of this ImageSearchResponse.  # noqa: E501
        :rtype: list[ImageSearchCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ImageSearchResponse.

        The eligible categories that apply to this image search response   # noqa: E501

        :param categories: The categories of this ImageSearchResponse.  # noqa: E501
        :type: list[ImageSearchCategory]
        """

        self._categories = categories

    @property
    def items(self):
        """Gets the items of this ImageSearchResponse.  # noqa: E501

        The items that match the image   # noqa: E501

        :return: The items of this ImageSearchResponse.  # noqa: E501
        :rtype: list[ImageSearchItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ImageSearchResponse.

        The items that match the image   # noqa: E501

        :param items: The items of this ImageSearchResponse.  # noqa: E501
        :type: list[ImageSearchItem]
        """

        self._items = items

    @property
    def selected_category_id(self):
        """Gets the selected_category_id of this ImageSearchResponse.  # noqa: E501

        The category ID which is selected   # noqa: E501

        :return: The selected_category_id of this ImageSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._selected_category_id

    @selected_category_id.setter
    def selected_category_id(self, selected_category_id):
        """Sets the selected_category_id of this ImageSearchResponse.

        The category ID which is selected   # noqa: E501

        :param selected_category_id: The selected_category_id of this ImageSearchResponse.  # noqa: E501
        :type: int
        """

        self._selected_category_id = selected_category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
