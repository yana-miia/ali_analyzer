# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RealtimeSearchRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'int',
        'text': 'str',
        'price_range': 'DoubleRange',
        'ship_to_country': 'str',
        'ship_from_country': 'str',
        'sort': 'str',
        'skip': 'int'
    }

    attribute_map = {
        'category': 'category',
        'text': 'text',
        'price_range': 'priceRange',
        'ship_to_country': 'shipToCountry',
        'ship_from_country': 'shipFromCountry',
        'sort': 'sort',
        'skip': 'skip'
    }

    def __init__(self, category=None, text=None, price_range=None, ship_to_country=None, ship_from_country=None, sort='BEST_MATCH', skip=None):  # noqa: E501
        """RealtimeSearchRequest - a model defined in OpenAPI"""  # noqa: E501

        self._category = None
        self._text = None
        self._price_range = None
        self._ship_to_country = None
        self._ship_from_country = None
        self._sort = None
        self._skip = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if text is not None:
            self.text = text
        if price_range is not None:
            self.price_range = price_range
        if ship_to_country is not None:
            self.ship_to_country = ship_to_country
        if ship_from_country is not None:
            self.ship_from_country = ship_from_country
        if sort is not None:
            self.sort = sort
        if skip is not None:
            self.skip = skip

    @property
    def category(self):
        """Gets the category of this RealtimeSearchRequest.  # noqa: E501

        The category to filter by   # noqa: E501

        :return: The category of this RealtimeSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RealtimeSearchRequest.

        The category to filter by   # noqa: E501

        :param category: The category of this RealtimeSearchRequest.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def text(self):
        """Gets the text of this RealtimeSearchRequest.  # noqa: E501

        The text to filter by   # noqa: E501

        :return: The text of this RealtimeSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RealtimeSearchRequest.

        The text to filter by   # noqa: E501

        :param text: The text of this RealtimeSearchRequest.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def price_range(self):
        """Gets the price_range of this RealtimeSearchRequest.  # noqa: E501


        :return: The price_range of this RealtimeSearchRequest.  # noqa: E501
        :rtype: DoubleRange
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this RealtimeSearchRequest.


        :param price_range: The price_range of this RealtimeSearchRequest.  # noqa: E501
        :type: DoubleRange
        """

        self._price_range = price_range

    @property
    def ship_to_country(self):
        """Gets the ship_to_country of this RealtimeSearchRequest.  # noqa: E501

        The 2 character ISO code of the country where the item will be shipped to   # noqa: E501

        :return: The ship_to_country of this RealtimeSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_country

    @ship_to_country.setter
    def ship_to_country(self, ship_to_country):
        """Sets the ship_to_country of this RealtimeSearchRequest.

        The 2 character ISO code of the country where the item will be shipped to   # noqa: E501

        :param ship_to_country: The ship_to_country of this RealtimeSearchRequest.  # noqa: E501
        :type: str
        """

        self._ship_to_country = ship_to_country

    @property
    def ship_from_country(self):
        """Gets the ship_from_country of this RealtimeSearchRequest.  # noqa: E501

        The 2 character ISO code of the country where the item is shipped from   # noqa: E501

        :return: The ship_from_country of this RealtimeSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._ship_from_country

    @ship_from_country.setter
    def ship_from_country(self, ship_from_country):
        """Sets the ship_from_country of this RealtimeSearchRequest.

        The 2 character ISO code of the country where the item is shipped from   # noqa: E501

        :param ship_from_country: The ship_from_country of this RealtimeSearchRequest.  # noqa: E501
        :type: str
        """

        self._ship_from_country = ship_from_country

    @property
    def sort(self):
        """Gets the sort of this RealtimeSearchRequest.  # noqa: E501

        The sort order of the result   # noqa: E501

        :return: The sort of this RealtimeSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this RealtimeSearchRequest.

        The sort order of the result   # noqa: E501

        :param sort: The sort of this RealtimeSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["BEST_MATCH", "HIGHEST_PRICE", "LOWEST_PRICE", "NUMBER_OF_ORDERS", "SELLER_RATING", "NEWEST_TO_OLDEST"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def skip(self):
        """Gets the skip of this RealtimeSearchRequest.  # noqa: E501

        Number of items to skip, used for pagination   # noqa: E501

        :return: The skip of this RealtimeSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this RealtimeSearchRequest.

        Number of items to skip, used for pagination   # noqa: E501

        :param skip: The skip of this RealtimeSearchRequest.  # noqa: E501
        :type: int
        """
        if skip is not None and skip > 5000:  # noqa: E501
            raise ValueError("Invalid value for `skip`, must be a value less than or equal to `5000`")  # noqa: E501
        if skip is not None and skip < 0:  # noqa: E501
            raise ValueError("Invalid value for `skip`, must be a value greater than or equal to `0`")  # noqa: E501

        self._skip = skip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RealtimeSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
