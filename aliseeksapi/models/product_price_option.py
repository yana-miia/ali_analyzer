# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductPriceOption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_amount': 'Amount',
        'max_amount_per_piece': 'Amount',
        'min_amount': 'Amount',
        'min_amount_per_piece': 'Amount',
        'minimum_purchase': 'int',
        'processing_time': 'float',
        'bulk_option': 'ProductBulkOption'
    }

    attribute_map = {
        'max_amount': 'maxAmount',
        'max_amount_per_piece': 'maxAmountPerPiece',
        'min_amount': 'minAmount',
        'min_amount_per_piece': 'minAmountPerPiece',
        'minimum_purchase': 'minimumPurchase',
        'processing_time': 'processingTime',
        'bulk_option': 'bulkOption'
    }

    def __init__(self, max_amount=None, max_amount_per_piece=None, min_amount=None, min_amount_per_piece=None, minimum_purchase=None, processing_time=None, bulk_option=None):  # noqa: E501
        """ProductPriceOption - a model defined in OpenAPI"""  # noqa: E501

        self._max_amount = None
        self._max_amount_per_piece = None
        self._min_amount = None
        self._min_amount_per_piece = None
        self._minimum_purchase = None
        self._processing_time = None
        self._bulk_option = None
        self.discriminator = None

        if max_amount is not None:
            self.max_amount = max_amount
        if max_amount_per_piece is not None:
            self.max_amount_per_piece = max_amount_per_piece
        if min_amount is not None:
            self.min_amount = min_amount
        if min_amount_per_piece is not None:
            self.min_amount_per_piece = min_amount_per_piece
        if minimum_purchase is not None:
            self.minimum_purchase = minimum_purchase
        if processing_time is not None:
            self.processing_time = processing_time
        if bulk_option is not None:
            self.bulk_option = bulk_option

    @property
    def max_amount(self):
        """Gets the max_amount of this ProductPriceOption.  # noqa: E501


        :return: The max_amount of this ProductPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this ProductPriceOption.


        :param max_amount: The max_amount of this ProductPriceOption.  # noqa: E501
        :type: Amount
        """

        self._max_amount = max_amount

    @property
    def max_amount_per_piece(self):
        """Gets the max_amount_per_piece of this ProductPriceOption.  # noqa: E501


        :return: The max_amount_per_piece of this ProductPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._max_amount_per_piece

    @max_amount_per_piece.setter
    def max_amount_per_piece(self, max_amount_per_piece):
        """Sets the max_amount_per_piece of this ProductPriceOption.


        :param max_amount_per_piece: The max_amount_per_piece of this ProductPriceOption.  # noqa: E501
        :type: Amount
        """

        self._max_amount_per_piece = max_amount_per_piece

    @property
    def min_amount(self):
        """Gets the min_amount of this ProductPriceOption.  # noqa: E501


        :return: The min_amount of this ProductPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this ProductPriceOption.


        :param min_amount: The min_amount of this ProductPriceOption.  # noqa: E501
        :type: Amount
        """

        self._min_amount = min_amount

    @property
    def min_amount_per_piece(self):
        """Gets the min_amount_per_piece of this ProductPriceOption.  # noqa: E501


        :return: The min_amount_per_piece of this ProductPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._min_amount_per_piece

    @min_amount_per_piece.setter
    def min_amount_per_piece(self, min_amount_per_piece):
        """Sets the min_amount_per_piece of this ProductPriceOption.


        :param min_amount_per_piece: The min_amount_per_piece of this ProductPriceOption.  # noqa: E501
        :type: Amount
        """

        self._min_amount_per_piece = min_amount_per_piece

    @property
    def minimum_purchase(self):
        """Gets the minimum_purchase of this ProductPriceOption.  # noqa: E501

        The minimum purchase amount for this price option   # noqa: E501

        :return: The minimum_purchase of this ProductPriceOption.  # noqa: E501
        :rtype: int
        """
        return self._minimum_purchase

    @minimum_purchase.setter
    def minimum_purchase(self, minimum_purchase):
        """Sets the minimum_purchase of this ProductPriceOption.

        The minimum purchase amount for this price option   # noqa: E501

        :param minimum_purchase: The minimum_purchase of this ProductPriceOption.  # noqa: E501
        :type: int
        """

        self._minimum_purchase = minimum_purchase

    @property
    def processing_time(self):
        """Gets the processing_time of this ProductPriceOption.  # noqa: E501

        The amount of time to process an order in this option   # noqa: E501

        :return: The processing_time of this ProductPriceOption.  # noqa: E501
        :rtype: float
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this ProductPriceOption.

        The amount of time to process an order in this option   # noqa: E501

        :param processing_time: The processing_time of this ProductPriceOption.  # noqa: E501
        :type: float
        """

        self._processing_time = processing_time

    @property
    def bulk_option(self):
        """Gets the bulk_option of this ProductPriceOption.  # noqa: E501


        :return: The bulk_option of this ProductPriceOption.  # noqa: E501
        :rtype: ProductBulkOption
        """
        return self._bulk_option

    @bulk_option.setter
    def bulk_option(self, bulk_option):
        """Sets the bulk_option of this ProductPriceOption.


        :param bulk_option: The bulk_option of this ProductPriceOption.  # noqa: E501
        :type: ProductBulkOption
        """

        self._bulk_option = bulk_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPriceOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
