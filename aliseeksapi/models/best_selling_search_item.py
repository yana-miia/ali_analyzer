# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BestSellingSearchItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'title': 'str',
        'image_url': 'str',
        'ratings': 'float',
        'orders': 'int',
        'detail_url': 'str',
        'store_detail_url': 'str',
        'price_options': 'list[SearchPriceOption]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'image_url': 'imageUrl',
        'ratings': 'ratings',
        'orders': 'orders',
        'detail_url': 'detailUrl',
        'store_detail_url': 'storeDetailUrl',
        'price_options': 'priceOptions'
    }

    def __init__(self, id=None, title=None, image_url=None, ratings=None, orders=None, detail_url=None, store_detail_url=None, price_options=None):  # noqa: E501
        """BestSellingSearchItem - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._title = None
        self._image_url = None
        self._ratings = None
        self._orders = None
        self._detail_url = None
        self._store_detail_url = None
        self._price_options = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if image_url is not None:
            self.image_url = image_url
        if ratings is not None:
            self.ratings = ratings
        if orders is not None:
            self.orders = orders
        if detail_url is not None:
            self.detail_url = detail_url
        if store_detail_url is not None:
            self.store_detail_url = store_detail_url
        if price_options is not None:
            self.price_options = price_options

    @property
    def id(self):
        """Gets the id of this BestSellingSearchItem.  # noqa: E501

        The ID of the product   # noqa: E501

        :return: The id of this BestSellingSearchItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BestSellingSearchItem.

        The ID of the product   # noqa: E501

        :param id: The id of this BestSellingSearchItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this BestSellingSearchItem.  # noqa: E501

        The title of the product   # noqa: E501

        :return: The title of this BestSellingSearchItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BestSellingSearchItem.

        The title of the product   # noqa: E501

        :param title: The title of this BestSellingSearchItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image_url(self):
        """Gets the image_url of this BestSellingSearchItem.  # noqa: E501

        The url of the product image   # noqa: E501

        :return: The image_url of this BestSellingSearchItem.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this BestSellingSearchItem.

        The url of the product image   # noqa: E501

        :param image_url: The image_url of this BestSellingSearchItem.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def ratings(self):
        """Gets the ratings of this BestSellingSearchItem.  # noqa: E501

        The product ratings   # noqa: E501

        :return: The ratings of this BestSellingSearchItem.  # noqa: E501
        :rtype: float
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this BestSellingSearchItem.

        The product ratings   # noqa: E501

        :param ratings: The ratings of this BestSellingSearchItem.  # noqa: E501
        :type: float
        """

        self._ratings = ratings

    @property
    def orders(self):
        """Gets the orders of this BestSellingSearchItem.  # noqa: E501

        The number of orders that the item has   # noqa: E501

        :return: The orders of this BestSellingSearchItem.  # noqa: E501
        :rtype: int
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this BestSellingSearchItem.

        The number of orders that the item has   # noqa: E501

        :param orders: The orders of this BestSellingSearchItem.  # noqa: E501
        :type: int
        """

        self._orders = orders

    @property
    def detail_url(self):
        """Gets the detail_url of this BestSellingSearchItem.  # noqa: E501

        The detail URL of the item   # noqa: E501

        :return: The detail_url of this BestSellingSearchItem.  # noqa: E501
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this BestSellingSearchItem.

        The detail URL of the item   # noqa: E501

        :param detail_url: The detail_url of this BestSellingSearchItem.  # noqa: E501
        :type: str
        """

        self._detail_url = detail_url

    @property
    def store_detail_url(self):
        """Gets the store_detail_url of this BestSellingSearchItem.  # noqa: E501

        The store detail URL for the item   # noqa: E501

        :return: The store_detail_url of this BestSellingSearchItem.  # noqa: E501
        :rtype: str
        """
        return self._store_detail_url

    @store_detail_url.setter
    def store_detail_url(self, store_detail_url):
        """Sets the store_detail_url of this BestSellingSearchItem.

        The store detail URL for the item   # noqa: E501

        :param store_detail_url: The store_detail_url of this BestSellingSearchItem.  # noqa: E501
        :type: str
        """

        self._store_detail_url = store_detail_url

    @property
    def price_options(self):
        """Gets the price_options of this BestSellingSearchItem.  # noqa: E501

        The price options of the item   # noqa: E501

        :return: The price_options of this BestSellingSearchItem.  # noqa: E501
        :rtype: list[SearchPriceOption]
        """
        return self._price_options

    @price_options.setter
    def price_options(self, price_options):
        """Sets the price_options of this BestSellingSearchItem.

        The price options of the item   # noqa: E501

        :param price_options: The price_options of this BestSellingSearchItem.  # noqa: E501
        :type: list[SearchPriceOption]
        """

        self._price_options = price_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BestSellingSearchItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
