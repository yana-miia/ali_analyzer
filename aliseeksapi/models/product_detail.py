# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'category_id': 'str',
        'company_id': 'str',
        'seller_id': 'str',
        'title': 'str',
        'product_images': 'list[str]',
        'status_id': 'int',
        'count_per_lot': 'int',
        'wish_list_count': 'int',
        'unit': 'str',
        'multi_unit': 'str',
        'promotions': 'list[PromotionOption]',
        'attributes': 'list[ProductAttribute]',
        'prices': 'list[ProductPriceOption]',
        'reviews': 'ProductReviews',
        'trade': 'TradeInformation',
        'sku_properties': 'list[SkuProperty]'
    }

    attribute_map = {
        'id': 'id',
        'category_id': 'categoryId',
        'company_id': 'companyId',
        'seller_id': 'sellerId',
        'title': 'title',
        'product_images': 'productImages',
        'status_id': 'statusId',
        'count_per_lot': 'countPerLot',
        'wish_list_count': 'wishListCount',
        'unit': 'unit',
        'multi_unit': 'multiUnit',
        'promotions': 'promotions',
        'attributes': 'attributes',
        'prices': 'prices',
        'reviews': 'reviews',
        'trade': 'trade',
        'sku_properties': 'skuProperties'
    }

    def __init__(self, id=None, category_id=None, company_id=None, seller_id=None, title=None, product_images=None, status_id=None, count_per_lot=None, wish_list_count=None, unit=None, multi_unit=None, promotions=None, attributes=None, prices=None, reviews=None, trade=None, sku_properties=None):  # noqa: E501
        """ProductDetail - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._category_id = None
        self._company_id = None
        self._seller_id = None
        self._title = None
        self._product_images = None
        self._status_id = None
        self._count_per_lot = None
        self._wish_list_count = None
        self._unit = None
        self._multi_unit = None
        self._promotions = None
        self._attributes = None
        self._prices = None
        self._reviews = None
        self._trade = None
        self._sku_properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if category_id is not None:
            self.category_id = category_id
        if company_id is not None:
            self.company_id = company_id
        if seller_id is not None:
            self.seller_id = seller_id
        if title is not None:
            self.title = title
        if product_images is not None:
            self.product_images = product_images
        if status_id is not None:
            self.status_id = status_id
        if count_per_lot is not None:
            self.count_per_lot = count_per_lot
        if wish_list_count is not None:
            self.wish_list_count = wish_list_count
        if unit is not None:
            self.unit = unit
        if multi_unit is not None:
            self.multi_unit = multi_unit
        if promotions is not None:
            self.promotions = promotions
        if attributes is not None:
            self.attributes = attributes
        if prices is not None:
            self.prices = prices
        if reviews is not None:
            self.reviews = reviews
        if trade is not None:
            self.trade = trade
        if sku_properties is not None:
            self.sku_properties = sku_properties

    @property
    def id(self):
        """Gets the id of this ProductDetail.  # noqa: E501

        The AliExpress item ID   # noqa: E501

        :return: The id of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductDetail.

        The AliExpress item ID   # noqa: E501

        :param id: The id of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def category_id(self):
        """Gets the category_id of this ProductDetail.  # noqa: E501

        The item category   # noqa: E501

        :return: The category_id of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ProductDetail.

        The item category   # noqa: E501

        :param category_id: The category_id of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def company_id(self):
        """Gets the company_id of this ProductDetail.  # noqa: E501

        The company ID   # noqa: E501

        :return: The company_id of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ProductDetail.

        The company ID   # noqa: E501

        :param company_id: The company_id of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def seller_id(self):
        """Gets the seller_id of this ProductDetail.  # noqa: E501

        The seller ID   # noqa: E501

        :return: The seller_id of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this ProductDetail.

        The seller ID   # noqa: E501

        :param seller_id: The seller_id of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._seller_id = seller_id

    @property
    def title(self):
        """Gets the title of this ProductDetail.  # noqa: E501

        The subject / title of the item   # noqa: E501

        :return: The title of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductDetail.

        The subject / title of the item   # noqa: E501

        :param title: The title of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def product_images(self):
        """Gets the product_images of this ProductDetail.  # noqa: E501

        The item images   # noqa: E501

        :return: The product_images of this ProductDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_images

    @product_images.setter
    def product_images(self, product_images):
        """Sets the product_images of this ProductDetail.

        The item images   # noqa: E501

        :param product_images: The product_images of this ProductDetail.  # noqa: E501
        :type: list[str]
        """

        self._product_images = product_images

    @property
    def status_id(self):
        """Gets the status_id of this ProductDetail.  # noqa: E501

        The AliExpress status   # noqa: E501

        :return: The status_id of this ProductDetail.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this ProductDetail.

        The AliExpress status   # noqa: E501

        :param status_id: The status_id of this ProductDetail.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def count_per_lot(self):
        """Gets the count_per_lot of this ProductDetail.  # noqa: E501

        The number of items per lot   # noqa: E501

        :return: The count_per_lot of this ProductDetail.  # noqa: E501
        :rtype: int
        """
        return self._count_per_lot

    @count_per_lot.setter
    def count_per_lot(self, count_per_lot):
        """Sets the count_per_lot of this ProductDetail.

        The number of items per lot   # noqa: E501

        :param count_per_lot: The count_per_lot of this ProductDetail.  # noqa: E501
        :type: int
        """

        self._count_per_lot = count_per_lot

    @property
    def wish_list_count(self):
        """Gets the wish_list_count of this ProductDetail.  # noqa: E501

        Number of times the item has been added to a wishlist   # noqa: E501

        :return: The wish_list_count of this ProductDetail.  # noqa: E501
        :rtype: int
        """
        return self._wish_list_count

    @wish_list_count.setter
    def wish_list_count(self, wish_list_count):
        """Sets the wish_list_count of this ProductDetail.

        Number of times the item has been added to a wishlist   # noqa: E501

        :param wish_list_count: The wish_list_count of this ProductDetail.  # noqa: E501
        :type: int
        """

        self._wish_list_count = wish_list_count

    @property
    def unit(self):
        """Gets the unit of this ProductDetail.  # noqa: E501

        The unit of the item   # noqa: E501

        :return: The unit of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProductDetail.

        The unit of the item   # noqa: E501

        :param unit: The unit of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def multi_unit(self):
        """Gets the multi_unit of this ProductDetail.  # noqa: E501

        The unit for multiple items   # noqa: E501

        :return: The multi_unit of this ProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._multi_unit

    @multi_unit.setter
    def multi_unit(self, multi_unit):
        """Sets the multi_unit of this ProductDetail.

        The unit for multiple items   # noqa: E501

        :param multi_unit: The multi_unit of this ProductDetail.  # noqa: E501
        :type: str
        """

        self._multi_unit = multi_unit

    @property
    def promotions(self):
        """Gets the promotions of this ProductDetail.  # noqa: E501

        The promotions present on an item   # noqa: E501

        :return: The promotions of this ProductDetail.  # noqa: E501
        :rtype: list[PromotionOption]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this ProductDetail.

        The promotions present on an item   # noqa: E501

        :param promotions: The promotions of this ProductDetail.  # noqa: E501
        :type: list[PromotionOption]
        """

        self._promotions = promotions

    @property
    def attributes(self):
        """Gets the attributes of this ProductDetail.  # noqa: E501

        The attributes of an item   # noqa: E501

        :return: The attributes of this ProductDetail.  # noqa: E501
        :rtype: list[ProductAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductDetail.

        The attributes of an item   # noqa: E501

        :param attributes: The attributes of this ProductDetail.  # noqa: E501
        :type: list[ProductAttribute]
        """

        self._attributes = attributes

    @property
    def prices(self):
        """Gets the prices of this ProductDetail.  # noqa: E501

        List of price options for an item   # noqa: E501

        :return: The prices of this ProductDetail.  # noqa: E501
        :rtype: list[ProductPriceOption]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ProductDetail.

        List of price options for an item   # noqa: E501

        :param prices: The prices of this ProductDetail.  # noqa: E501
        :type: list[ProductPriceOption]
        """

        self._prices = prices

    @property
    def reviews(self):
        """Gets the reviews of this ProductDetail.  # noqa: E501


        :return: The reviews of this ProductDetail.  # noqa: E501
        :rtype: ProductReviews
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this ProductDetail.


        :param reviews: The reviews of this ProductDetail.  # noqa: E501
        :type: ProductReviews
        """

        self._reviews = reviews

    @property
    def trade(self):
        """Gets the trade of this ProductDetail.  # noqa: E501


        :return: The trade of this ProductDetail.  # noqa: E501
        :rtype: TradeInformation
        """
        return self._trade

    @trade.setter
    def trade(self, trade):
        """Sets the trade of this ProductDetail.


        :param trade: The trade of this ProductDetail.  # noqa: E501
        :type: TradeInformation
        """

        self._trade = trade

    @property
    def sku_properties(self):
        """Gets the sku_properties of this ProductDetail.  # noqa: E501

        List of sku properties that correspond to an item   # noqa: E501

        :return: The sku_properties of this ProductDetail.  # noqa: E501
        :rtype: list[SkuProperty]
        """
        return self._sku_properties

    @sku_properties.setter
    def sku_properties(self, sku_properties):
        """Sets the sku_properties of this ProductDetail.

        List of sku properties that correspond to an item   # noqa: E501

        :param sku_properties: The sku_properties of this ProductDetail.  # noqa: E501
        :type: list[SkuProperty]
        """

        self._sku_properties = sku_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
