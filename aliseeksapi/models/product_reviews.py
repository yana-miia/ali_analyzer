# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductReviews(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'five_star_count': 'int',
        'four_star_count': 'int',
        'three_star_count': 'int',
        'two_star_count': 'int',
        'one_star_count': 'int',
        'total_count': 'int',
        'positive_count': 'int',
        'negative_count': 'int',
        'neutral_count': 'int',
        'ratings': 'float'
    }

    attribute_map = {
        'five_star_count': 'fiveStarCount',
        'four_star_count': 'fourStarCount',
        'three_star_count': 'threeStarCount',
        'two_star_count': 'twoStarCount',
        'one_star_count': 'oneStarCount',
        'total_count': 'totalCount',
        'positive_count': 'positiveCount',
        'negative_count': 'negativeCount',
        'neutral_count': 'neutralCount',
        'ratings': 'ratings'
    }

    def __init__(self, five_star_count=None, four_star_count=None, three_star_count=None, two_star_count=None, one_star_count=None, total_count=None, positive_count=None, negative_count=None, neutral_count=None, ratings=None):  # noqa: E501
        """ProductReviews - a model defined in OpenAPI"""  # noqa: E501

        self._five_star_count = None
        self._four_star_count = None
        self._three_star_count = None
        self._two_star_count = None
        self._one_star_count = None
        self._total_count = None
        self._positive_count = None
        self._negative_count = None
        self._neutral_count = None
        self._ratings = None
        self.discriminator = None

        if five_star_count is not None:
            self.five_star_count = five_star_count
        if four_star_count is not None:
            self.four_star_count = four_star_count
        if three_star_count is not None:
            self.three_star_count = three_star_count
        if two_star_count is not None:
            self.two_star_count = two_star_count
        if one_star_count is not None:
            self.one_star_count = one_star_count
        if total_count is not None:
            self.total_count = total_count
        if positive_count is not None:
            self.positive_count = positive_count
        if negative_count is not None:
            self.negative_count = negative_count
        if neutral_count is not None:
            self.neutral_count = neutral_count
        if ratings is not None:
            self.ratings = ratings

    @property
    def five_star_count(self):
        """Gets the five_star_count of this ProductReviews.  # noqa: E501


        :return: The five_star_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._five_star_count

    @five_star_count.setter
    def five_star_count(self, five_star_count):
        """Sets the five_star_count of this ProductReviews.


        :param five_star_count: The five_star_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._five_star_count = five_star_count

    @property
    def four_star_count(self):
        """Gets the four_star_count of this ProductReviews.  # noqa: E501


        :return: The four_star_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._four_star_count

    @four_star_count.setter
    def four_star_count(self, four_star_count):
        """Sets the four_star_count of this ProductReviews.


        :param four_star_count: The four_star_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._four_star_count = four_star_count

    @property
    def three_star_count(self):
        """Gets the three_star_count of this ProductReviews.  # noqa: E501


        :return: The three_star_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._three_star_count

    @three_star_count.setter
    def three_star_count(self, three_star_count):
        """Sets the three_star_count of this ProductReviews.


        :param three_star_count: The three_star_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._three_star_count = three_star_count

    @property
    def two_star_count(self):
        """Gets the two_star_count of this ProductReviews.  # noqa: E501


        :return: The two_star_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._two_star_count

    @two_star_count.setter
    def two_star_count(self, two_star_count):
        """Sets the two_star_count of this ProductReviews.


        :param two_star_count: The two_star_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._two_star_count = two_star_count

    @property
    def one_star_count(self):
        """Gets the one_star_count of this ProductReviews.  # noqa: E501


        :return: The one_star_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._one_star_count

    @one_star_count.setter
    def one_star_count(self, one_star_count):
        """Sets the one_star_count of this ProductReviews.


        :param one_star_count: The one_star_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._one_star_count = one_star_count

    @property
    def total_count(self):
        """Gets the total_count of this ProductReviews.  # noqa: E501

        Total review count   # noqa: E501

        :return: The total_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ProductReviews.

        Total review count   # noqa: E501

        :param total_count: The total_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def positive_count(self):
        """Gets the positive_count of this ProductReviews.  # noqa: E501

        Count of positive reviews   # noqa: E501

        :return: The positive_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._positive_count

    @positive_count.setter
    def positive_count(self, positive_count):
        """Sets the positive_count of this ProductReviews.

        Count of positive reviews   # noqa: E501

        :param positive_count: The positive_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._positive_count = positive_count

    @property
    def negative_count(self):
        """Gets the negative_count of this ProductReviews.  # noqa: E501

        Count of negative reviews   # noqa: E501

        :return: The negative_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._negative_count

    @negative_count.setter
    def negative_count(self, negative_count):
        """Sets the negative_count of this ProductReviews.

        Count of negative reviews   # noqa: E501

        :param negative_count: The negative_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._negative_count = negative_count

    @property
    def neutral_count(self):
        """Gets the neutral_count of this ProductReviews.  # noqa: E501

        Count of neutral reviews   # noqa: E501

        :return: The neutral_count of this ProductReviews.  # noqa: E501
        :rtype: int
        """
        return self._neutral_count

    @neutral_count.setter
    def neutral_count(self, neutral_count):
        """Sets the neutral_count of this ProductReviews.

        Count of neutral reviews   # noqa: E501

        :param neutral_count: The neutral_count of this ProductReviews.  # noqa: E501
        :type: int
        """

        self._neutral_count = neutral_count

    @property
    def ratings(self):
        """Gets the ratings of this ProductReviews.  # noqa: E501

        Product ratings score   # noqa: E501

        :return: The ratings of this ProductReviews.  # noqa: E501
        :rtype: float
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this ProductReviews.

        Product ratings score   # noqa: E501

        :param ratings: The ratings of this ProductReviews.  # noqa: E501
        :type: float
        """

        self._ratings = ratings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductReviews):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
