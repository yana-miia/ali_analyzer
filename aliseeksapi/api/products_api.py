# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aliseeksapi.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_product(self, **kwargs):  # noqa: E501
        """Get products details as an aggregated request from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductRequest product_request: The request body of get product 
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_product_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_product_with_http_info(self, **kwargs):  # noqa: E501
        """Get products details as an aggregated request from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductRequest product_request: The request body of get product 
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['product_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_request' in local_var_params:
            body_params = local_var_params['product_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_details(self, product_details_request, **kwargs):  # noqa: E501
        """Gets product details from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_details(product_details_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductDetailsRequest product_details_request: The request body to get product details  (required)
        :return: ProductDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_details_with_http_info(product_details_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_details_with_http_info(product_details_request, **kwargs)  # noqa: E501
            return data

    def get_product_details_with_http_info(self, product_details_request, **kwargs):  # noqa: E501
        """Gets product details from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_details_with_http_info(product_details_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductDetailsRequest product_details_request: The request body to get product details  (required)
        :return: ProductDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['product_details_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'product_details_request' is set
        if ('product_details_request' not in local_var_params or
                local_var_params['product_details_request'] is None):
            raise ValueError("Missing the required parameter `product_details_request` when calling `get_product_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_details_request' in local_var_params:
            body_params = local_var_params['product_details_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_html_description(self, product_html_description_request, **kwargs):  # noqa: E501
        """Get product HTML description from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_html_description(product_html_description_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductHtmlDescriptionRequest product_html_description_request: The request body to get product html description  (required)
        :return: ProductHtmlDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_html_description_with_http_info(product_html_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_html_description_with_http_info(product_html_description_request, **kwargs)  # noqa: E501
            return data

    def get_product_html_description_with_http_info(self, product_html_description_request, **kwargs):  # noqa: E501
        """Get product HTML description from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_html_description_with_http_info(product_html_description_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductHtmlDescriptionRequest product_html_description_request: The request body to get product html description  (required)
        :return: ProductHtmlDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['product_html_description_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_html_description" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'product_html_description_request' is set
        if ('product_html_description_request' not in local_var_params or
                local_var_params['product_html_description_request'] is None):
            raise ValueError("Missing the required parameter `product_html_description_request` when calling `get_product_html_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_html_description_request' in local_var_params:
            body_params = local_var_params['product_html_description_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/description/html', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductHtmlDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_shipping(self, product_shipping_request, **kwargs):  # noqa: E501
        """Gets product shipping information AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_shipping(product_shipping_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductShippingRequest product_shipping_request: The request body to get product shipping  (required)
        :return: ProductShipping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_shipping_with_http_info(product_shipping_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_shipping_with_http_info(product_shipping_request, **kwargs)  # noqa: E501
            return data

    def get_product_shipping_with_http_info(self, product_shipping_request, **kwargs):  # noqa: E501
        """Gets product shipping information AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_shipping_with_http_info(product_shipping_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductShippingRequest product_shipping_request: The request body to get product shipping  (required)
        :return: ProductShipping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['product_shipping_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_shipping" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'product_shipping_request' is set
        if ('product_shipping_request' not in local_var_params or
                local_var_params['product_shipping_request'] is None):
            raise ValueError("Missing the required parameter `product_shipping_request` when calling `get_product_shipping`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_shipping_request' in local_var_params:
            body_params = local_var_params['product_shipping_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/shipping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductShipping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_skus(self, product_skus_request, **kwargs):  # noqa: E501
        """Gets product skus / variation information from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_skus(product_skus_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductSkusRequest product_skus_request: The request body to get product skus / variations  (required)
        :return: ProductSkus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_skus_with_http_info(product_skus_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_skus_with_http_info(product_skus_request, **kwargs)  # noqa: E501
            return data

    def get_product_skus_with_http_info(self, product_skus_request, **kwargs):  # noqa: E501
        """Gets product skus / variation information from AliExpress in realtime.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_skus_with_http_info(product_skus_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductSkusRequest product_skus_request: The request body to get product skus / variations  (required)
        :return: ProductSkus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['product_skus_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_skus" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'product_skus_request' is set
        if ('product_skus_request' not in local_var_params or
                local_var_params['product_skus_request'] is None):
            raise ValueError("Missing the required parameter `product_skus_request` when calling `get_product_skus`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_skus_request' in local_var_params:
            body_params = local_var_params['product_skus_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/variations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSkus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
