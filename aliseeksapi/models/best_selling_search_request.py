# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BestSellingSearchRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'range': 'str',
        'category': 'str',
        'skip': 'int',
        'locale': 'str',
        'currency': 'RealtimeCurrency'
    }

    attribute_map = {
        'range': 'range',
        'category': 'category',
        'skip': 'skip',
        'locale': 'locale',
        'currency': 'currency'
    }

    def __init__(self, range='top', category='fashion', skip=0, locale='en_US', currency=None):  # noqa: E501
        """BestSellingSearchRequest - a model defined in OpenAPI"""  # noqa: E501

        self._range = None
        self._category = None
        self._skip = None
        self._locale = None
        self._currency = None
        self.discriminator = None

        if range is not None:
            self.range = range
        if category is not None:
            self.category = category
        if skip is not None:
            self.skip = skip
        if locale is not None:
            self.locale = locale
        if currency is not None:
            self.currency = currency

    @property
    def range(self):
        """Gets the range of this BestSellingSearchRequest.  # noqa: E501

        The time range to look for best selling products. Can be Top best selling products or Weekly best selling products.   # noqa: E501

        :return: The range of this BestSellingSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this BestSellingSearchRequest.

        The time range to look for best selling products. Can be Top best selling products or Weekly best selling products.   # noqa: E501

        :param range: The range of this BestSellingSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["top", "weekly"]  # noqa: E501
        if range not in allowed_values:
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"  # noqa: E501
                .format(range, allowed_values)
            )

        self._range = range

    @property
    def category(self):
        """Gets the category of this BestSellingSearchRequest.  # noqa: E501

        The category to look for best selling products. Only certain categories can be searched for depending on the `range`. When range is \"top\", only the categories [ \"all\", \"fashion\", \"electronics\", \"sports\", \"health_beauty\", \"kids_baby\", \"home_garden\", \"automotive\" ] are supported. When range is \"weekly\", only the categories [ \"woman\", \"men\", \"electronics\", \"sports\", \"health_beauty\", \"kids_baby\", \"automotive\" ] are supported.   # noqa: E501

        :return: The category of this BestSellingSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BestSellingSearchRequest.

        The category to look for best selling products. Only certain categories can be searched for depending on the `range`. When range is \"top\", only the categories [ \"all\", \"fashion\", \"electronics\", \"sports\", \"health_beauty\", \"kids_baby\", \"home_garden\", \"automotive\" ] are supported. When range is \"weekly\", only the categories [ \"woman\", \"men\", \"electronics\", \"sports\", \"health_beauty\", \"kids_baby\", \"automotive\" ] are supported.   # noqa: E501

        :param category: The category of this BestSellingSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "fashion", "sports", "health_beauty", "home_garden", "kids_baby", "automotive", "men", "women"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def skip(self):
        """Gets the skip of this BestSellingSearchRequest.  # noqa: E501

        The number of results to skip. Allows for pagination.   # noqa: E501

        :return: The skip of this BestSellingSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this BestSellingSearchRequest.

        The number of results to skip. Allows for pagination.   # noqa: E501

        :param skip: The skip of this BestSellingSearchRequest.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def locale(self):
        """Gets the locale of this BestSellingSearchRequest.  # noqa: E501

        AliExpress locale to use.   # noqa: E501

        :return: The locale of this BestSellingSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this BestSellingSearchRequest.

        AliExpress locale to use.   # noqa: E501

        :param locale: The locale of this BestSellingSearchRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def currency(self):
        """Gets the currency of this BestSellingSearchRequest.  # noqa: E501


        :return: The currency of this BestSellingSearchRequest.  # noqa: E501
        :rtype: RealtimeCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BestSellingSearchRequest.


        :param currency: The currency of this BestSellingSearchRequest.  # noqa: E501
        :type: RealtimeCurrency
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BestSellingSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
