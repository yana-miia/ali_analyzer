# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SearchItemSeller(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'store_name': 'str',
        'name': 'str',
        'positive_feedback': 'int',
        'negative_feedback': 'int',
        'seller_score': 'int',
        'total_feedback': 'int'
    }

    attribute_map = {
        'store_name': 'storeName',
        'name': 'name',
        'positive_feedback': 'positiveFeedback',
        'negative_feedback': 'negativeFeedback',
        'seller_score': 'sellerScore',
        'total_feedback': 'totalFeedback'
    }

    def __init__(self, store_name=None, name=None, positive_feedback=None, negative_feedback=None, seller_score=None, total_feedback=None):  # noqa: E501
        """SearchItemSeller - a model defined in OpenAPI"""  # noqa: E501

        self._store_name = None
        self._name = None
        self._positive_feedback = None
        self._negative_feedback = None
        self._seller_score = None
        self._total_feedback = None
        self.discriminator = None

        if store_name is not None:
            self.store_name = store_name
        if name is not None:
            self.name = name
        if positive_feedback is not None:
            self.positive_feedback = positive_feedback
        if negative_feedback is not None:
            self.negative_feedback = negative_feedback
        if seller_score is not None:
            self.seller_score = seller_score
        if total_feedback is not None:
            self.total_feedback = total_feedback

    @property
    def store_name(self):
        """Gets the store_name of this SearchItemSeller.  # noqa: E501

        The name of the seller store   # noqa: E501

        :return: The store_name of this SearchItemSeller.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this SearchItemSeller.

        The name of the seller store   # noqa: E501

        :param store_name: The store_name of this SearchItemSeller.  # noqa: E501
        :type: str
        """

        self._store_name = store_name

    @property
    def name(self):
        """Gets the name of this SearchItemSeller.  # noqa: E501

        The name of the seller   # noqa: E501

        :return: The name of this SearchItemSeller.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchItemSeller.

        The name of the seller   # noqa: E501

        :param name: The name of this SearchItemSeller.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def positive_feedback(self):
        """Gets the positive_feedback of this SearchItemSeller.  # noqa: E501

        The amount of positive feedback for the seller   # noqa: E501

        :return: The positive_feedback of this SearchItemSeller.  # noqa: E501
        :rtype: int
        """
        return self._positive_feedback

    @positive_feedback.setter
    def positive_feedback(self, positive_feedback):
        """Sets the positive_feedback of this SearchItemSeller.

        The amount of positive feedback for the seller   # noqa: E501

        :param positive_feedback: The positive_feedback of this SearchItemSeller.  # noqa: E501
        :type: int
        """

        self._positive_feedback = positive_feedback

    @property
    def negative_feedback(self):
        """Gets the negative_feedback of this SearchItemSeller.  # noqa: E501

        The amount of negative feedback for the seller   # noqa: E501

        :return: The negative_feedback of this SearchItemSeller.  # noqa: E501
        :rtype: int
        """
        return self._negative_feedback

    @negative_feedback.setter
    def negative_feedback(self, negative_feedback):
        """Sets the negative_feedback of this SearchItemSeller.

        The amount of negative feedback for the seller   # noqa: E501

        :param negative_feedback: The negative_feedback of this SearchItemSeller.  # noqa: E501
        :type: int
        """

        self._negative_feedback = negative_feedback

    @property
    def seller_score(self):
        """Gets the seller_score of this SearchItemSeller.  # noqa: E501

        The score of the seller   # noqa: E501

        :return: The seller_score of this SearchItemSeller.  # noqa: E501
        :rtype: int
        """
        return self._seller_score

    @seller_score.setter
    def seller_score(self, seller_score):
        """Sets the seller_score of this SearchItemSeller.

        The score of the seller   # noqa: E501

        :param seller_score: The seller_score of this SearchItemSeller.  # noqa: E501
        :type: int
        """

        self._seller_score = seller_score

    @property
    def total_feedback(self):
        """Gets the total_feedback of this SearchItemSeller.  # noqa: E501

        The total amount of feedback for the seller   # noqa: E501

        :return: The total_feedback of this SearchItemSeller.  # noqa: E501
        :rtype: int
        """
        return self._total_feedback

    @total_feedback.setter
    def total_feedback(self, total_feedback):
        """Sets the total_feedback of this SearchItemSeller.

        The total amount of feedback for the seller   # noqa: E501

        :param total_feedback: The total_feedback of this SearchItemSeller.  # noqa: E501
        :type: int
        """

        self._total_feedback = total_feedback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchItemSeller):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
