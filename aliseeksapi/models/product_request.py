# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'RealtimeCurrency',
        'product_id': 'str',
        'locale': 'str',
        'time_zone': 'str',
        'country': 'str',
        'send_goods_country': 'str',
        'quantity': 'int',
        'components': 'list[ProductRequestComponent]'
    }

    attribute_map = {
        'currency': 'currency',
        'product_id': 'productId',
        'locale': 'locale',
        'time_zone': 'timeZone',
        'country': 'country',
        'send_goods_country': 'sendGoodsCountry',
        'quantity': 'quantity',
        'components': 'components'
    }

    def __init__(self, currency=None, product_id=None, locale='en_US', time_zone='CST', country=None, send_goods_country=None, quantity=None, components=None):  # noqa: E501
        """ProductRequest - a model defined in OpenAPI"""  # noqa: E501

        self._currency = None
        self._product_id = None
        self._locale = None
        self._time_zone = None
        self._country = None
        self._send_goods_country = None
        self._quantity = None
        self._components = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if product_id is not None:
            self.product_id = product_id
        if locale is not None:
            self.locale = locale
        if time_zone is not None:
            self.time_zone = time_zone
        if country is not None:
            self.country = country
        if send_goods_country is not None:
            self.send_goods_country = send_goods_country
        if quantity is not None:
            self.quantity = quantity
        if components is not None:
            self.components = components

    @property
    def currency(self):
        """Gets the currency of this ProductRequest.  # noqa: E501


        :return: The currency of this ProductRequest.  # noqa: E501
        :rtype: RealtimeCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductRequest.


        :param currency: The currency of this ProductRequest.  # noqa: E501
        :type: RealtimeCurrency
        """

        self._currency = currency

    @property
    def product_id(self):
        """Gets the product_id of this ProductRequest.  # noqa: E501

        The Product ID   # noqa: E501

        :return: The product_id of this ProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductRequest.

        The Product ID   # noqa: E501

        :param product_id: The product_id of this ProductRequest.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def locale(self):
        """Gets the locale of this ProductRequest.  # noqa: E501

        AliExpress locale to use.   # noqa: E501

        :return: The locale of this ProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ProductRequest.

        AliExpress locale to use.   # noqa: E501

        :param locale: The locale of this ProductRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def time_zone(self):
        """Gets the time_zone of this ProductRequest.  # noqa: E501

        Timezone to format times in   # noqa: E501

        :return: The time_zone of this ProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ProductRequest.

        Timezone to format times in   # noqa: E501

        :param time_zone: The time_zone of this ProductRequest.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def country(self):
        """Gets the country of this ProductRequest.  # noqa: E501

        Two character iso country code   # noqa: E501

        :return: The country of this ProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ProductRequest.

        Two character iso country code   # noqa: E501

        :param country: The country of this ProductRequest.  # noqa: E501
        :type: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501

        self._country = country

    @property
    def send_goods_country(self):
        """Gets the send_goods_country of this ProductRequest.  # noqa: E501

        Two character iso country code   # noqa: E501

        :return: The send_goods_country of this ProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._send_goods_country

    @send_goods_country.setter
    def send_goods_country(self, send_goods_country):
        """Sets the send_goods_country of this ProductRequest.

        Two character iso country code   # noqa: E501

        :param send_goods_country: The send_goods_country of this ProductRequest.  # noqa: E501
        :type: str
        """
        if send_goods_country is not None and len(send_goods_country) > 2:
            raise ValueError("Invalid value for `send_goods_country`, length must be less than or equal to `2`")  # noqa: E501

        self._send_goods_country = send_goods_country

    @property
    def quantity(self):
        """Gets the quantity of this ProductRequest.  # noqa: E501


        :return: The quantity of this ProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductRequest.


        :param quantity: The quantity of this ProductRequest.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def components(self):
        """Gets the components of this ProductRequest.  # noqa: E501


        :return: The components of this ProductRequest.  # noqa: E501
        :rtype: list[ProductRequestComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ProductRequest.


        :param components: The components of this ProductRequest.  # noqa: E501
        :type: list[ProductRequestComponent]
        """

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
