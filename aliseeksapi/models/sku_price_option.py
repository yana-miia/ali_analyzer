# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SkuPriceOption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'original_price': 'Amount',
        'discounted_price': 'Amount',
        'bulk_price': 'Amount',
        'bulk_quantity': 'int',
        'sku_image': 'str',
        'discounted_stock': 'int',
        'stock': 'int',
        'sku_identifier': 'str',
        'properties': 'list[SkuPriceOptionProperty]'
    }

    attribute_map = {
        'original_price': 'originalPrice',
        'discounted_price': 'discountedPrice',
        'bulk_price': 'bulkPrice',
        'bulk_quantity': 'bulkQuantity',
        'sku_image': 'skuImage',
        'discounted_stock': 'discountedStock',
        'stock': 'stock',
        'sku_identifier': 'skuIdentifier',
        'properties': 'properties'
    }

    def __init__(self, original_price=None, discounted_price=None, bulk_price=None, bulk_quantity=None, sku_image=None, discounted_stock=None, stock=None, sku_identifier=None, properties=None):  # noqa: E501
        """SkuPriceOption - a model defined in OpenAPI"""  # noqa: E501

        self._original_price = None
        self._discounted_price = None
        self._bulk_price = None
        self._bulk_quantity = None
        self._sku_image = None
        self._discounted_stock = None
        self._stock = None
        self._sku_identifier = None
        self._properties = None
        self.discriminator = None

        if original_price is not None:
            self.original_price = original_price
        if discounted_price is not None:
            self.discounted_price = discounted_price
        if bulk_price is not None:
            self.bulk_price = bulk_price
        if bulk_quantity is not None:
            self.bulk_quantity = bulk_quantity
        if sku_image is not None:
            self.sku_image = sku_image
        if discounted_stock is not None:
            self.discounted_stock = discounted_stock
        if stock is not None:
            self.stock = stock
        if sku_identifier is not None:
            self.sku_identifier = sku_identifier
        if properties is not None:
            self.properties = properties

    @property
    def original_price(self):
        """Gets the original_price of this SkuPriceOption.  # noqa: E501


        :return: The original_price of this SkuPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this SkuPriceOption.


        :param original_price: The original_price of this SkuPriceOption.  # noqa: E501
        :type: Amount
        """

        self._original_price = original_price

    @property
    def discounted_price(self):
        """Gets the discounted_price of this SkuPriceOption.  # noqa: E501


        :return: The discounted_price of this SkuPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._discounted_price

    @discounted_price.setter
    def discounted_price(self, discounted_price):
        """Sets the discounted_price of this SkuPriceOption.


        :param discounted_price: The discounted_price of this SkuPriceOption.  # noqa: E501
        :type: Amount
        """

        self._discounted_price = discounted_price

    @property
    def bulk_price(self):
        """Gets the bulk_price of this SkuPriceOption.  # noqa: E501


        :return: The bulk_price of this SkuPriceOption.  # noqa: E501
        :rtype: Amount
        """
        return self._bulk_price

    @bulk_price.setter
    def bulk_price(self, bulk_price):
        """Sets the bulk_price of this SkuPriceOption.


        :param bulk_price: The bulk_price of this SkuPriceOption.  # noqa: E501
        :type: Amount
        """

        self._bulk_price = bulk_price

    @property
    def bulk_quantity(self):
        """Gets the bulk_quantity of this SkuPriceOption.  # noqa: E501

        The quantity that needs to be ordered to qualify for the bulk discount   # noqa: E501

        :return: The bulk_quantity of this SkuPriceOption.  # noqa: E501
        :rtype: int
        """
        return self._bulk_quantity

    @bulk_quantity.setter
    def bulk_quantity(self, bulk_quantity):
        """Sets the bulk_quantity of this SkuPriceOption.

        The quantity that needs to be ordered to qualify for the bulk discount   # noqa: E501

        :param bulk_quantity: The bulk_quantity of this SkuPriceOption.  # noqa: E501
        :type: int
        """

        self._bulk_quantity = bulk_quantity

    @property
    def sku_image(self):
        """Gets the sku_image of this SkuPriceOption.  # noqa: E501

        The image associated with the sku   # noqa: E501

        :return: The sku_image of this SkuPriceOption.  # noqa: E501
        :rtype: str
        """
        return self._sku_image

    @sku_image.setter
    def sku_image(self, sku_image):
        """Sets the sku_image of this SkuPriceOption.

        The image associated with the sku   # noqa: E501

        :param sku_image: The sku_image of this SkuPriceOption.  # noqa: E501
        :type: str
        """

        self._sku_image = sku_image

    @property
    def discounted_stock(self):
        """Gets the discounted_stock of this SkuPriceOption.  # noqa: E501

        The stock left at the discounted price   # noqa: E501

        :return: The discounted_stock of this SkuPriceOption.  # noqa: E501
        :rtype: int
        """
        return self._discounted_stock

    @discounted_stock.setter
    def discounted_stock(self, discounted_stock):
        """Sets the discounted_stock of this SkuPriceOption.

        The stock left at the discounted price   # noqa: E501

        :param discounted_stock: The discounted_stock of this SkuPriceOption.  # noqa: E501
        :type: int
        """

        self._discounted_stock = discounted_stock

    @property
    def stock(self):
        """Gets the stock of this SkuPriceOption.  # noqa: E501

        The stock left for the sku   # noqa: E501

        :return: The stock of this SkuPriceOption.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this SkuPriceOption.

        The stock left for the sku   # noqa: E501

        :param stock: The stock of this SkuPriceOption.  # noqa: E501
        :type: int
        """

        self._stock = stock

    @property
    def sku_identifier(self):
        """Gets the sku_identifier of this SkuPriceOption.  # noqa: E501

        The identifier of the sku   # noqa: E501

        :return: The sku_identifier of this SkuPriceOption.  # noqa: E501
        :rtype: str
        """
        return self._sku_identifier

    @sku_identifier.setter
    def sku_identifier(self, sku_identifier):
        """Sets the sku_identifier of this SkuPriceOption.

        The identifier of the sku   # noqa: E501

        :param sku_identifier: The sku_identifier of this SkuPriceOption.  # noqa: E501
        :type: str
        """

        self._sku_identifier = sku_identifier

    @property
    def properties(self):
        """Gets the properties of this SkuPriceOption.  # noqa: E501

        The properties associated with this sku   # noqa: E501

        :return: The properties of this SkuPriceOption.  # noqa: E501
        :rtype: list[SkuPriceOptionProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SkuPriceOption.

        The properties associated with this sku   # noqa: E501

        :param properties: The properties of this SkuPriceOption.  # noqa: E501
        :type: list[SkuPriceOptionProperty]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkuPriceOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
