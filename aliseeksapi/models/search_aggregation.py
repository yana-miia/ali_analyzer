# coding: utf-8

"""
    Aliseeks API

    AliExpress product searching and product details retrieval API.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SearchAggregation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_count': 'int',
        'skip': 'int',
        'limit': 'int',
        'scroll_identifier': 'str'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'skip': 'skip',
        'limit': 'limit',
        'scroll_identifier': 'scrollIdentifier'
    }

    def __init__(self, total_count=None, skip=None, limit=None, scroll_identifier=None):  # noqa: E501
        """SearchAggregation - a model defined in OpenAPI"""  # noqa: E501

        self._total_count = None
        self._skip = None
        self._limit = None
        self._scroll_identifier = None
        self.discriminator = None

        if total_count is not None:
            self.total_count = total_count
        if skip is not None:
            self.skip = skip
        if limit is not None:
            self.limit = limit
        if scroll_identifier is not None:
            self.scroll_identifier = scroll_identifier

    @property
    def total_count(self):
        """Gets the total_count of this SearchAggregation.  # noqa: E501

        The total number of items that match the request   # noqa: E501

        :return: The total_count of this SearchAggregation.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SearchAggregation.

        The total number of items that match the request   # noqa: E501

        :param total_count: The total_count of this SearchAggregation.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def skip(self):
        """Gets the skip of this SearchAggregation.  # noqa: E501

        The number of items that were skipped   # noqa: E501

        :return: The skip of this SearchAggregation.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this SearchAggregation.

        The number of items that were skipped   # noqa: E501

        :param skip: The skip of this SearchAggregation.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def limit(self):
        """Gets the limit of this SearchAggregation.  # noqa: E501

        The number of items to return   # noqa: E501

        :return: The limit of this SearchAggregation.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchAggregation.

        The number of items to return   # noqa: E501

        :param limit: The limit of this SearchAggregation.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def scroll_identifier(self):
        """Gets the scroll_identifier of this SearchAggregation.  # noqa: E501

        The scroll identifier which can be used in a subsequent search request to fetch the next page. Expires in 60 seconds.   # noqa: E501

        :return: The scroll_identifier of this SearchAggregation.  # noqa: E501
        :rtype: str
        """
        return self._scroll_identifier

    @scroll_identifier.setter
    def scroll_identifier(self, scroll_identifier):
        """Sets the scroll_identifier of this SearchAggregation.

        The scroll identifier which can be used in a subsequent search request to fetch the next page. Expires in 60 seconds.   # noqa: E501

        :param scroll_identifier: The scroll_identifier of this SearchAggregation.  # noqa: E501
        :type: str
        """

        self._scroll_identifier = scroll_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
